syntax = "proto3";
package ETModel;

message C2M_TestRequest // IActorLocationRequest
{
    int32 RpcId = 90;
    int64 ActorId = 93;
    string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    string response = 1;
}

message Actor_TransferRequest // IActorLocationRequest
{
    int32 RpcId = 90;
    int64 ActorId = 93;
    int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message C2G_EnterMap // IRequest
{
    int32 RpcId = 90;
}

message G2C_EnterMap // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
    // 自己的unit id
    int64 UnitId = 1;
    // 所有的unit
    repeated UnitInfo Units = 2;
}

message UnitInfo {
    int64 UnitId = 1;
    int32 UnitTypeId = 99;
	int32 RoleCamp = 91;

    float X = 2;
    float Y = 3;
    float Z = 4;
}

message M2C_CreateUnits // IActorMessage
{
    int32 RpcId = 90;
    int64 ActorId = 93;
    repeated UnitInfo Units = 1;
}

message SpilingInfo {
    int64 UnitId = 1;
    int64 ParentUnitId = 5;
	int32 RoleCamp = 91;
	
    float X = 2;
    float Y = 3;
    float Z = 4;
}

//创建木桩
message M2C_CreateSpilings // IActorMessage
{
    int32 RpcId = 90;
    int64 ActorId = 93;
    SpilingInfo Spilings = 1;
}

message Frame_ClickMap // IActorLocationMessage
{
    int32 RpcId = 90;
    int64 ActorId = 93;
    int64 Id = 94;

    float X = 1;
    float Y = 2;
    float Z = 3;
}

message M2C_PathfindingResult // IActorMessage
{
    int64 ActorId = 93;

    int64 Id = 1;

    float X = 2;
    float Y = 3;
    float Z = 4;

    repeated float Xs = 5;
    repeated float Ys = 6;
    repeated float Zs = 7;
}


message C2R_Ping // IRequest
{
    int32 RpcId = 90;
}

message R2C_Ping // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message G2C_Test // IMessage
{
}

message C2M_Reload // IRequest
{
    int32 RpcId = 90;
    string Account = 1;
    string Password = 2;
}

message M2C_Reload // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message C2G_HeartBeat // IRequest
{
    int32 RpcId = 90;
}

message G2C_HeartBeat // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}

message M2C_BuffInfo // IActorMessage
{
    int32 RpcId = 90;
    int64 ActorId = 93;

    int64 UnitId = 1; //要发送到的目标UnitId
    int64 SkillId = 96; //目标技能Id

    string BBKey = 2; //黑板键，此键对应值将会被设置为Buff层数

    int64 TheUnitBelongToId = 95; //Buff归属的UnitId
    int64 TheUnitFromId = 91; //Buff来自的UnitId
    int32 BuffLayers = 3; //Buff层数
    float BuffMaxLimitTime = 4; //Buff最大持续到的时间点
}

//请求攻击
message C2M_CommonAttack // IActorLocationMessage
{
    int32 RpcId = 90;
    int64 ActorId = 93;

    int64 TargetUnitId = 1;
}

//服务器返回攻击指令，开始播放动画
message M2C_CommonAttack // IActorMessage
{
    int32 RpcId = 90;
    int64 ActorId = 93;
    
    int64 AttackCasterId = 4;//攻击发起者Id
    int64 TargetUnitId = 3;//攻击目标Id
    bool CanAttack = 2; //是否可以发起攻击
}



/*
    房间消息开始.本应独立文件.暂不做修改
*/

//房间简略信息.用于给客户端列表展示.
message RoomBriefInfo
{
    int32 MaxMemberCount = 1;
    int32 CurrentMemberCount = 2;
    string MasterName = 3;
    bool IsInBattle = 4;
}
message C2RM_CreateRoom // IRequest
{
    int32 RpcId = 90;
}

message RM2C_CreateRoom // IResponse
{
    int32 RpcId = 90;
    int32 Error = 91;
    string Message = 92;
}
/*
    房间消息结束.
*/